**********************************************************************************                                       Written By*                                     Gordon Doughman*                                           For*                                  Motorola Semiconductor**       The author reserves the right to make changes to this file. Although this*       software has been carefully reviewed and is believed to be reliable, Motorola*       nor the author assumes any liability arising from its use. This software may*       be freely used and/or modified at no cost or obligation to the user.**       The following macros may be used to help in managing stack frames in*       M68HC11 programs. The macros were written for Micro Dialects uASM-HC11*       assembler that runs on the Macintosh but may be used with other assemblers*       with some modification. The following discussion of the way parameters are*       passed and referenced should help in the conversion process.**       Within a macro, parameters are referenced by using a colin (:) followed*       by a single decimal digit (0 - 9). Therefore, within the body of the macro*       the first parameter is referenced by using ':0', the second parameter is*       referenced by using ':1' and so forth. Parameter substitution is performed*       strictly on a textual substitution basis.***********************************************************************************      The link macro may be used to allocate a complete stack frame after entry*      into a subroutine. The link macro performs the following functions:*      1.) Saves the previous stack frame pointer; 2.) Allocates the requested*      number of bytes of local storage; 3.) Initializes a new stack frame pointer.**      Usage:     link   <s.f. reg>,<storage bytes>**      The first parameter passed to link is the index register that is being used*      as the stack frame pointer (either x or y). Although no check is made to*      ensure that a legal index register name is passed to the macro, the assembler*      will produce an "Unrecognized Mnemonic" error message when the macro is*      expanded. The second parameter is the number of bytes of local storage*      required by the subroutine.**********************************************************************************link    macro        psh:0                   ; Save the previous stack frame pointer.        ts:0                    ; Transfer the stack pointer into :0.        xgd:0                   ; Transfer :0 into D.        subd    #:1             ; subtract the required amount of local storage.        xgd:0                   ; Initialize the new stack frame pointer        t:0s                    ; Update the stack pointer with new value.        endm************************************************************************************      The rtd (Return and Deallocate) macro may be used to partially deallocate*      a subroutine stack frame that includes parameters passed on the stack. The*      rtd macro performs the following functions: 1.) Deallocates local storage;*      2.) Restores the previous stack frame pointer; 3.) Returns to the calling*      routine. Rtd DOES NOT remove any parameters from the stack. This function*      must be performed by the calling routine. This macro is useful when*      parameters are passed in registers rather than on the stack.**      Usage:     rtd   <s.f. reg>,<storage bytes>**      The first parameter passed to link is the index register that is being used*      as the stack frame pointer (either x or y). Although no check is made to*      ensure that a legal index register name is passed to the macro, the assembler*      will produce an "Unrecognized Mnemonic" error message when the macro is*      expanded. The second parameter is the number of bytes of local storage*      used by the subroutine.**********************************************************************************rtd     macro        ldab    #:1             ; number of bytes to deallocate.        ab:0                    ; add it to the current stack frame pointer.        t:0s                    ; deallocate storage by updating the stack pointer.        pul:0                   ; restore the previous stack frame pointer.        rts                     ; return to the calling routine.        endm************************************************************************************      The frtd (Function Return and Deallocate) macro may be used to partially*      deallocate a subroutine stack frame that includes parameters passed on*      the stack. The frtd macro performs the following functions: 1.) Deallocates*      local storage; 2.) Restores the previous stack frame pointer; 3.) Returns*      to the calling routine. Frtd DOES NOT remove any parameters from the stack.*      This function must be performed by the calling routine. This macro is*      useful when parameters are passed in registers rather than on the stack and*      a value is being returned in the D-accumulator.**      Usage:     frtd   <s.f. reg>,<storage bytes>**      The first parameter passed to frtd is the index register that is being used*      as the stack frame pointer (either x or y). Although no check is made to*      ensure that a legal index register name is passed to the macro, the assembler*      will produce an "Unrecognized Mnemonic" error message when the macro is*      expanded. The second parameter is the number of bytes of local storage*      used by the subroutine.**********************************************************************************frtd    macro        pshb                    ; save the lower byte of the return value.        ldab    #:1             ; number of bytes to deallocate.        ab:0                    ; add it to the current stack frame pointer.        pulb                    ; restore the lower byte of the return value.        t:0s                    ; deallocate storage by updating the stack pointer.        pul:0                   ; restore the previous stack frame pointer.        rts                     ; return to the calling routine.        endm************************************************************************************       The rtdx and rtdy (Return and Deallocate using x or y) macros may be used*       to completely deallocate a subroutine stack frame including parameters that*       were passed on the stack. The rtdx macro performs the following functions:*       1.) Deallocates the entire stack frame including local storage and passed*       parameters; 2.) Restores the previous stack frame pointer; and 3.) Returns*       to the calling routine.**       Usage:     rtdx   <storage bytes>*       Usage:     rtdy   <storage bytes>**       The only parameter passed to the routines is the number of bytes of local storage*       that were originally allocated upon entry to the subroutine. These macros have*       the advantage that the a and b accumulators are not used during the deallocation*       process. This allows a value to be loaded into the a, b, or d registers before*       the execution of the rtdx or rtdy macro and returned to the calling routine.**********************************************************************************rtdx    macro        ldy     :0+2,x          ; Load the return address into the y-index register.        ldx     :0,x            ; restore the previous stack frame pointer.        txs                     ; Update the stack pointer, removing the storage space.        jmp      0,y            ; Return to the calling routine.        endm**rtdy    macro        ldx     :0+2,y          ; Load the return address into the x-index register.        ldy     :0,y            ; restore the previous stack frame pointer.        tys                     ; Update the stack pointer, removing the storage space.        jmp      0,x            ; Return to the calling routine.        endm************************************************************************************       The pshd macro pushes the 16-bit d-accumulator onto the stack. The*       b-accumulator is pushed first so that the least significant 8-bits of*       the 16-bit number appear on the stack at the higher address. This is*       consistant with the way all 16-bit numbers are stored in memory.**       Usage:     pshd**       No parameters are required by the macro.**********************************************************************************pshd    macro        pshb        psha        endm************************************************************************************       The puld macro puls the top two bytes from the stack and places them in*       the 16-bit d-accumulator. The first byte pulled from the stack is placed*       in the a-accumulator the second byte pulled from the stack is placed in*       the b-accumulator. The pull order is consistant with the way all 16-bit*       numbers are stored in memory.**       Usage:     puld**       No parameters are required by the macro.**********************************************************************************puld    macro        pula        pulb        endm************************************************************************************       The clrd macro uses the clra and clrb instructions to clear the 16-bit*       d-accumulator.**       Usage:     clrd**       No parameters are required by the macro.**********************************************************************************clrd    macro        clra        clrb        endm**